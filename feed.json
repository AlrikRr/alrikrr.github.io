{
    "version": "https://jsonfeed.org/version/1",
    "title": "AlrikRr&#x27;s Blog",
    "description": "",
    "home_page_url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview",
    "feed_url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/feed.json",
    "user_comment": "",
    "author": {
        "name": "AlrikRr"
    },
    "items": [
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/my-pnpt-feedback/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/my-pnpt-feedback/index.html",
            "title": "My PNPT FeedBack",
            "summary": "Hi! Today I‚Äôm going to share with you my feedback on the PNPT certification that I passed at the beginning&hellip;",
            "content_html": "<p>Hi! Today I‚Äôm going to share with you my feedback on the PNPT certification that I passed at the beginning of August 2023 by reviewing the before and during the exam!</p>\n<hr>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#my-knowledge\">My Knowledge</a></li>\n<li><a href=\"#mcetoc_1h7tmfdnggn\">PNPT &amp; Package Course</a></li>\n<li><a href=\"#mcetoc_1h7tmfdnggo\">Exam Period - 5 Days</a>\n<ul>\n<li><a href=\"#mcetoc_1h7tmfdnggp\">Exam Skills</a></li>\n<li><a href=\"#mcetoc_1h7tmfdnggq\">Exam Package</a></li>\n<li><a href=\"#mcetoc_1h7tmfdnggr\">My Exam</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1h7tmfdnggs\">Report Period - 2 days</a></li>\n<li><a href=\"#mcetoc_1h7tmfdnggt\">Final Presentation</a></li>\n</ul>\n</div>\n<h1 id=\"my-knowledge\">My Background</h1>\n<p>Before we dive deeper, let me clarify my experience since I see few people talking about their skills before starting the examination. I have 4 years of experience in the field of computer security, with 2 actual years spent as a Pentester. I frequently practice at home, as well as during missions conducting intrusion tests on both internal and external client environments. Moreover, report writing is no longer a mysterious art for me. So, I‚Äôm embarking on this certification with a significant advantage compared to someone new to this field. üõ°Ô∏è</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/pnpt-2.jpeg\" alt=\"\" width=\"468\" height=\"297\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/responsive/pnpt-2-xs.jpeg 300w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/responsive/pnpt-2-sm.jpeg 480w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/responsive/pnpt-2-md.jpeg 768w\"></figure>\n<h1 id=\"mcetoc_1h7tmfdnggn\">PNPT &amp; Package Course</h1>\n<p>Before purchasing the PNPT courses and voucher, it‚Äôs essential to note that the two exam vouchers do not have an expiration date. The courses are available on the Academic TCM-Security platform, and you‚Äôll be provided with five courses, along with their completion percentages, to give you an idea of what I‚Äôve gone through so far:</p>\n<ul>\n<li>Practical Ethical Hacking - The Complete Course¬†<strong>94%</strong></li>\n<li>Windows Privilege Escalation for Beginners¬†<strong>75%</strong></li>\n<li>Linux Privilege Escalation for Beginners¬†<strong>0%</strong></li>\n<li>Open-Source Intelligence (OSINT) Fundamentals¬†<strong>0%</strong></li>\n<li>External Pentest Playbook¬†<strong>0%</strong></li>\n</ul>\n<p>Additionally, you‚Äôll have access to VODs of Twitch live sessions:</p>\n<ul>\n<li>PNPT Live Training VOD¬†<strong>0%</strong></li>\n</ul>\n<p class=\"msg msg--warning\">Please note that just because I haven‚Äôt finished all the courses doesn‚Äôt mean you should follow suit. As I mentioned earlier, I‚Äôm starting with an advantage.</p>\n<h1 id=\"mcetoc_1h7tmfdnggo\">Exam Period - 5 Days</h1>\n<p>It‚Äôs go-time! You‚Äôve set up your Kali Linux virtual machine, and the countdown has begun!</p>\n<p>You‚Äôve got 5 days to conquer this examination, which means compromising both the external and internal scope, ‚Äúsecuring‚Äù that Domain Admin access to the Domain Controller! All‚Äôs fair in this quest, but just remember, you‚Äôll be following a step-by-step process, just like on a genuine pentesting engagement with a client. So, no DDOS or other disruptions ‚Äì they could spell the end of your exam period!</p>\n<h2 id=\"mcetoc_1h7tmfdnggp\">Exam Skills</h2>\n<p>If I can offer you a few tips on the areas to review and master before taking the exam, here they are:</p>\n<ul>\n<li>OSINT (Open-Source Intelligence)</li>\n<li>Web Application Pentesting</li>\n<li>Pivoting and Proxychains</li>\n<li>Active Directory Pentesting</li>\n<li>Enumeration, Enumeration, ENUMERATION!</li>\n</ul>\n<h2 id=\"mcetoc_1h7tmfdnggq\">Exam Package</h2>\n<p>Regarding your Exam Package, you‚Äôll receive a PDF document containing your scope and instructions from your client. You can also make use of the password wordlists kindly provided by TCM (it‚Äôll make your life easier!).</p>\n<p>Lastly, you‚Äôll receive your VPN access for the lab and the option to revert or stop the lab whenever you want. This won‚Äôt affect the lab‚Äôs configuration or the exam duration.</p>\n<h2 id=\"mcetoc_1h7tmfdnggr\">My Exam</h2>\n<p>As for me, I faced a few challenges during the enumeration phase. I won‚Äôt say more to avoid spoiling anything! The attacks weren‚Äôt overly difficult; they‚Äôre entirely manageable even for beginners if you follow the courses provided by TCM.</p>\n<p>Still, it‚Äôs a lab exam that somewhat mirrors reality, even though everything is designed to give you hints about where to look and what to do without causing too many issues.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/meme-0.jpg\" alt=\"Private PNPT joke\" width=\"369\" height=\"298\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/responsive/meme-0-xs.jpg 300w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/responsive/meme-0-sm.jpg 480w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/responsive/meme-0-md.jpg 768w\"></figure>\n<h1 id=\"mcetoc_1h7tmfdnggs\">Report Period - 2 days</h1>\n<p>When it comes to the report writing phase, it‚Äôs also nothing overly complicated. I can only advise you to capture screenshots BEFORE your exam period ends!</p>\n<p>As for what I did, I took notes on the vulnerabilities I discovered and how to exploit them. It‚Äôs important to provide Proof of Concepts (PoCs) but also suggestions for fixing them. Remember, this report is intended for a client, so write it accordingly. Include both the technical and executive aspects.</p>\n<p>My report ended up being a total of 60 pages. I can list the main headings for you to give you an idea of the content, in case it helps inspire you!</p>\n<ul>\n<li>Objective &amp; Context</li>\n<li>Scope</li>\n<li>Server Discovery</li>\n<li>Testing Methodology</li>\n<li>Score &amp; Severity</li>\n<li>Executive Summary</li>\n<li>Vulnerability Summary</li>\n<li>Remediation Summary</li>\n<li>Attack Paths</li>\n<li>Technical Details (Vulnerability Details and PoCs)</li>\n</ul>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/meme-1.jpeg\" alt=\"\" width=\"517\" height=\"499\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/responsive/meme-1-xs.jpeg 300w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/responsive/meme-1-sm.jpeg 480w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/responsive/meme-1-md.jpeg 768w\"></figure>\n<h1 id=\"mcetoc_1h7tmfdnggt\">Final Presentation</h1>\n<p>Aside from the technical hiccups at the beginning of the presentation (well, you can‚Äôt really hide the chaos, can you‚Ä¶), it was quite swift ‚Äì no more than 15 minutes ‚Äì with a few questions from the examiner. On my end, I jumped right into presenting the English PDF report (with my French Baguette accent).</p>\n<p>The atmosphere was friendly, with no pressure as long as you‚Äôre confident in your subject! The advantage is that the examiner will give you the final verdict right away, letting you know if you‚Äôve earned your certification or not.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/pnpt-3.gif\" alt=\"\" width=\"360\" height=\"225\"></figure>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/pnpt-4.gif\" alt=\"\" width=\"360\" height=\"202\"></figure>\n<div id=\"post-content\" class=\"post-content\">\n<p>It‚Äôs still a great experience with TCM-Security. If you have any questions, I can answer them without revealing the exam‚Äôs content. As for me, I‚Äôm leaning towards the next certification in Malware Analysis, PJMR!</p>\n</div>\n<div class=\"row pl-3 pr-3\">¬†</div>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/2/my-cert.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "Updates"
            ],
            "date_published": "2023-08-15T18:53:27-04:00",
            "date_modified": "2023-08-15T19:11:58-04:00"
        },
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/9-nsec21-toms-hut-part2/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/9-nsec21-toms-hut-part2/index.html",
            "title": "#9 Nsec21 - Tom&#x27;s Hut part2",
            "summary": "If you want to fully understand this post I can only recommand you to read the previous one (Flag 8&hellip;",
            "content_html": "<p>If you want to fully understand this post I can only recommand you to read the previous one (Flag 8 part1)</p>\n<h1 id=\"re102-reverse\">RE102 Reverse</h1>\n<p>Like the previous one, the architecture is Xtensa, but this time I already have the right module for Ghidra !</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/9-flag/xtensa_elf.png\" alt=\"Xtensa Binary\" data-is-external-image=\"true\"></p>\n<p>Using Ghidra I‚Äôm doing the import and the analysis of the binary.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/9-flag/ghidra_import.png\" alt=\"Ghidra\" data-is-external-image=\"true\"></p>\n<h1 id=\"app-main\">App Main</h1>\n<p>The¬†<code>app_main</code>¬†function is very similar to¬†<code>RE101</code>, so this time let‚Äôs jump on the¬†<code>verify</code>¬†function !</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/9-flag/app_main.png\" alt=\"App Main\" data-is-external-image=\"true\"></p>\n<h2 id=\"verify\">Verify</h2>\n<p>This time its different, as we can see the user input is stored inside¬†<code>user_code</code>¬†and the check is done using¬†<code>a8</code>¬†registry.<br>In the first example, the first element of the input is checked with¬†<code>0x66</code>¬†which is a¬†<code>f</code>.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/9-flag/verify_stuff.png\" alt=\"Verify Function\" data-is-external-image=\"true\"></p>\n<p>We just need to jump into each function and check which element is checked and with which character.</p>\n<h1 id=\"flag\">Flag</h1>\n<p>The final FLAG is<code>f219e6cdb1fa4a48b160d00d61118f93</code></p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/9-flag/flag.png\" alt=\"Flag\" data-is-external-image=\"true\"></p>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/25/nsec-Badge.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "Write Up",
                   "BadgeLife"
            ],
            "date_published": "2023-04-08T21:53:00-04:00",
            "date_modified": "2023-08-15T21:53:28-04:00"
        },
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/8-nsec21-toms-hut-part1/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/8-nsec21-toms-hut-part1/index.html",
            "title": "#8 Nsec21 - Tom&#x27;s Hut part1",
            "summary": "The next 2 Flags are binary reverse, I was very very rusty on this one ‚Ä¶ So, this challenge is&hellip;",
            "content_html": "<p>The next 2 Flags are binary reverse, I was very very rusty on this one ‚Ä¶</p>\n<h1 id=\"wi-fi-join\">Wi-Fi Join</h1>\n<p>So, this challenge is accessible from Tom‚Äôs Hut after you have joined a Wi-Fi network !</p>\n<p>To join a Wi-Fi network, you need to access the serial port using¬†<code>screen</code>¬†(check Chall 7 !) and use the following command:</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/8-flag/wifi-connect.png\" alt=\"WF-Connect\" data-is-external-image=\"true\"></p>\n<p>You should receive an IP, you can now go to Tom‚Äôs Hut and see the following message !</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/24/Screenshot-from-2023-04-20-16-30-56.png\" alt=\"\" width=\"941\" height=\"837\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/24/responsive/Screenshot-from-2023-04-20-16-30-56-xs.png 300w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/24/responsive/Screenshot-from-2023-04-20-16-30-56-sm.png 480w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/24/responsive/Screenshot-from-2023-04-20-16-30-56-md.png 768w\"></figure>\n<p>Download both of the binaries, RE101 and RE102.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/8-flag/download-re.png\" alt=\"Download Binaries\" data-is-external-image=\"true\"></p>\n<h1 id=\"re101---reverse\">RE101 - Reverse</h1>\n<p>The first binary named¬†<code>re101.elf</code>¬†is a binary using Xtensa architecture.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/8-flag/re101-elf.png\" alt=\"re101\" data-is-external-image=\"true\"></p>\n<h2 id=\"xtensa-processor\">Xtensa Processor</h2>\n<p>I can¬¥t execute it on my machine so I‚Äôll use Ghidra to dissas and take a look inside.</p>\n<p>Unfortunately Ghidra can‚Äôt understand Xtensa binaries by default, so I need to add an extra Processor, here is the github link</p>\n<ul>\n<li><a href=\"https://github.com/yath/ghidra-xtensa\">Xtensa Arch - Github</a></li>\n</ul>\n<p>The install is explained inside the README.md but becarefull to gve your user the full ownership of the xtensa folder.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/8-flag/ghidra-xtensa.png\" alt=\"xtensa ghidra\" data-is-external-image=\"true\"></p>\n<p>Now the binary is recognized, we can analyse it and reverse it !</p>\n<h2 id=\"main-function\">Main function</h2>\n<p>The main function is easly located in the ghidra function folder.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/8-flag/main_func.png\" alt=\"Main Function\" data-is-external-image=\"true\"></p>\n<p>As we can see, this function accept a user input and then check this input with¬†<code>verify</code>¬†function. Depending of the user input, the¬†<code>verify</code>function will display the flag or not.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/8-flag/main_fun_full.png\" alt=\"Main Function Full\" data-is-external-image=\"true\"></p>\n<h2 id=\"verify-\">Verify !</h2>\n<p>The main function won¬¥t give us more information so let‚Äôs dig into¬†<code>verify</code>function !</p>\n<p>This one is a bit tricky but after half an hour, I sort of understand how it works.</p>\n<p>So, the user input in¬†<code>a1</code>¬†is checked characters by charaters but not in the right order.<br>The characters that are compared are stored inside¬†<code>a3</code>,¬†<code>a8</code>¬†etc. and the value of these registers are changing during the execution of the binary.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/8-flag/verify_code.png\" alt=\"Verify Code\" data-is-external-image=\"true\"></p>\n<p>I was a bit lazy on this one and used a notepad to check characters by characters the user input and then found the FLAG.</p>\n<p>Here is the correct order for each check.</p>\n<p>So you have the value¬†<code>a</code>¬†something with the affected value using¬†<code>movi</code>. Then the¬†<code>Stack</code>¬†whith the position of the letter checked inside the user input and it‚Äôs value.</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-text\" data-lang=\"text\">        400e4248 36 41 01        entry      a1 = 'u'\n        400e424b c2 a0 63        movi       a12 = 'c'\n        400e424e c2 61 15        s32i       a12,a1,0x54=&gt;Stack[0x54] ---&gt; 22 = c\n        400e4251 82 a0 62        movi       a8 = 'b' \n        400e4254 82 61 10        s32i       a8,a1,0x40=&gt;Stack[0x40]  ---&gt; 17 = b\n        400e4257 3c 4e           movi.n     a14 = '4'\n        400e4259 e9 a1           s32i.n     a14,a1,0x28=&gt;Stack[0x28]  ---&gt; 11 = 4\n        400e425b 3c 3b           movi.n     a11 = '3'\n        400e425d b2 61 12        s32i       a11,a1,0x48=&gt;Stack[0x48] ---&gt; 19 = 3\n        400e4260 3c 83           movi.n     a3 = '8'\n        400e4262 32 61 18        s32i       a3,a1,0x60=&gt;Stack[0x60]  ---&gt; 25 = 8\n        400e4265 82 61 19        s32i       a8,a1,0x64=&gt;Stack[0x64]  ---&gt; 26 = b \n        400e4268 3c 2a           movi.n     a10 = '2'\n        400e426a a9 51           s32i.n     a10,a1,0x14=&gt;Stack[0x14] ---&gt; 6 = 2\n        400e426c 3c 18           movi.n     a8 = '1'\n        400e426e 89 01           s32i.n     a8,a1=&gt;Stack[0x0],0x0     ----&gt; 1  = 1\n        400e4270 a2 61 17        s32i       a10,a1,0x5c=&gt;Stack[0x5c]  ---&gt; 24 = 2 \n        400e4273 82 61 16        s32i       a8,a1,0x58=&gt;Stack[0x58] ---&gt; 23 = 1\n        400e4276 3c 7f           movi.n     a15 = '7'\n        400e4278 f2 61 1d        s32i       a15,a1,0x74=&gt;Stack[0x74]  ---&gt; 30 = 7 \n        400e427b 3c 9d           movi.n     a13 = '9'\n        400e427d d9 31           s32i.n     a13,a1,0xc=&gt;Stack[0xc]    ----&gt; 4 = 9 \n        400e427f 82 61 13        s32i       a8,a1,0x4c=&gt;Stack[0x4c]  ----&gt; 20 = 1 \n        400e4282 92 a0 61        movi       a9 = 'a'\n        400e4285 99 21           s32i.n     a9,a1,0x8=&gt;Stack[0x8]   ------&gt; 3 = a\n        400e4287 92 a0 65        movi       a9 = 'e'\n        400e428a 99 f1           s32i.n     a9,a1,0x3c=&gt;Stack[0x3c]  ---&gt; 16 = e \n        400e428c 82 61 11        s32i       a8,a1,0x44=&gt;Stack[0x44]  ---&gt; 18 = 1 \n        400e428f 89 11           s32i.n     a8,a1,0x4=&gt;Stack[0x4]    -----&gt; 2 = 1\n        400e4291 89 61           s32i.n     a8,a1,0x18=&gt;Stack[0x18]  ---&gt; 7 = 1 \n        400e4293 3c 09           movi.n     a9 = '0'\n        400e4295 92 61 1f        s32i       a9,a1,0x7c=&gt;Stack[0x7c] ---&gt; 32 = 0\n        400e4298 3c 69           movi.n     a9 = '6'\n        400e429a 99 e1           s32i.n     a9,a1,0x38=&gt;Stack[0x38]  ---&gt; 15 = 6 \n        400e429c a9 41           s32i.n     a10,a1,0x10=&gt;Stack[0x10] ---&gt; 5 = 2 \n        400e429e 39 71           s32i.n     a3,a1,0x1c=&gt;Stack[0x1c]  ---&gt; 8 = 8\n        400e42a0 92 61 1b        s32i       a9,a1,0x6c=&gt;Stack[0x6c]  ---&gt; 28 = 6\n        400e42a3 f2 61 14        s32i       a15,a1,0x50=&gt;Stack[0x50] ---&gt; 21 = 7\n        400e42a6 99 81           s32i.n     a9,a1,0x20=&gt;Stack[0x20]  ---&gt; 9 = 6\n        400e42a8 e9 c1           s32i.n     a14,a1,0x30=&gt;Stack[0x30] ---&gt; 13 = 4\n        400e42aa 82 61 1c        s32i       a8,a1,0x70=&gt;Stack[0x70]  ---&gt; 29 = 1\n        400e42ad d9 d1           s32i.n     a13,a1,0x34=&gt;Stack[0x34]  ---&gt; 14 = 9\n        400e42af a2 61 1e        s32i       a10,a1,0x78=&gt;Stack[0x78] ---&gt; 31 = 2\n        400e42b2 99 b1           s32i.n     a9,a1,0x2c=&gt;Stack[0x2c]  ---&gt; 12 = 6\n        400e42b4 c9 91           s32i.n     a12,a1,0x24=&gt;Stack[0x24] ---&gt; 10  = c\n        400e42b6 b2 61 1a        s32i       a11,a1,0x68=&gt;Stack[0x68] ---&gt; 27 = 3\n        400e42b9 0c 08           movi.n     a8 = '0'\n</code></pre>\n</div>\n<h1 id=\"flag\">Flag</h1>\n<p>So, at the end, with all the position in the right order, here is the flag</p>\n<ul>\n<li>Flag =¬†<code>11a922186c46496eb1317c128b361720</code></li>\n</ul>\n<p>We can validate the challenge using the CLI on the badge</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/8-flag/validate.png\" alt=\"Validation\" data-is-external-image=\"true\"></p>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/24/nsec-Badge.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "Write Up",
                   "BadgeLife"
            ],
            "date_published": "2023-04-07T21:52:00-04:00",
            "date_modified": "2023-08-15T21:52:35-04:00"
        },
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/7-nsec21-reboot/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/7-nsec21-reboot/index.html",
            "title": "#7 Nsec21 - Reboot",
            "summary": "I was also lucky on this one. After connecting to the device using the serial port with the screen command:&hellip;",
            "content_html": "<p>I was also lucky on this one.</p>\n<h1 id=\"tty-cli\">tty CLI</h1>\n<p>After connecting to the device using the serial port with the screen command:</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-bash hljs\" data-lang=\"bash\">sudo screen /dev/ttyUSB0 115200\n</code></pre>\n</div>\n<p>If you can¬¥t see your ttyUSB, try using¬†<code>dmesg</code>¬†after connecting the badge on your computer.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/7-flag/dmesg.png\" alt=\"dmesg debug\" data-is-external-image=\"true\"></p>\n<p>And also check your¬†<code>/dev/</code>¬†folder</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/7-flag/ttyUSB0.png\" alt=\"ttyUSB in dev\" data-is-external-image=\"true\"></p>\n<h1 id=\"reboot-\">Reboot !</h1>\n<p>As you can see, behind the badge, there is a reboot button, and I keep pressing it by mistake!</p>\n<p>However, after looking at the terminal, I saw the full message and a small help menu before the shell!</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/7-flag/tab-reboot.png\" alt=\"Reboot menu\" data-is-external-image=\"true\"></p>\n<p>As you can see, I can use TAB to autocomplete commands. Maybe I need to found a hidden command which is not displayed with¬†<code>help</code>¬†command ?</p>\n<p>After pressing a few keys, I was able to discover the secret command¬†<code>the_sword_of_azeroth!</code></p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/7-flag/letter-t.png\" alt=\"Sword\" data-is-external-image=\"true\"></p>\n<h1 id=\"flag\">Flag</h1>\n<p>Here is the 7th Flag :¬†<code>FLAG-Cl1F0rFun&amp;Pr0f1t</code></p>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/23/nsec-Badge.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "Write Up",
                   "BadgeLife"
            ],
            "date_published": "2023-04-07T21:49:00-04:00",
            "date_modified": "2023-08-15T21:49:17-04:00"
        },
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/5-nsec21-punk-down/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/5-nsec21-punk-down/index.html",
            "title": "#5 Nsec21 - Punk Down",
            "summary": "Okay for this one I don‚Äôt have the reference but I managed to found it by accident ! It‚Äôs actually&hellip;",
            "content_html": "<p>Okay for this one I don‚Äôt have the reference but I managed to found it by accident ! It‚Äôs actually the second one I found during my journey.</p>\n<h1 id=\"punk-guy\">Punk Guy</h1>\n<p>I was playing around the place and speak to this Punk Guy right here<br><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/5-flag/flag5.png\" alt=\"Punk Guy\" data-is-external-image=\"true\"></p>\n<p>During the conversation, I found the flag by accident by pressing the Down Button¬†<img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/5-flag/punk1.png\" alt=\"Punk Guy\" data-is-external-image=\"true\"></p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/5-flag/punk2.png\" alt=\"Flag 5 \" data-is-external-image=\"true\"></p>\n<h1 id=\"flag-5\">Flag 5</h1>\n<p>The flag is¬†<code>FLAG-KLJV490uhkEJF28</code></p>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/22/nsec-Badge.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "Write Up",
                   "BadgeLife"
            ],
            "date_published": "2023-04-06T21:48:00-04:00",
            "date_modified": "2023-08-15T21:48:30-04:00"
        },
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/1-nsec21-welcome/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/1-nsec21-welcome/index.html",
            "title": "#1 Nsec21 - Welcome",
            "summary": "Hello everyone ! It‚Äôs been a while since my last post but I‚Äôm still alive no worries üòÅ Today I‚Äôm&hellip;",
            "content_html": "<p>Hello everyone ! It‚Äôs been a while since my last post but I‚Äôm still alive no worries üòÅ</p>\n<p>Today I‚Äôm gonna post some write-up for the NorthSec 2021 Badge CTF ! I purchase the badge last year and din‚Äôt have time to play with it so here I am !<br>It‚Äôs actually my first CTF Badge and I hope im going to fine all the flags !</p>\n<h1 id=\"device\">Device</h1>\n<p>Here is a full spec of the nsec badge :¬†<a href=\"https://github.com/nsec/nsec-badge\">available here</a></p>\n<p>Here is the Badge in the front<br><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/1-flag/badge-1.png\" alt=\"Badge Face\" data-is-external-image=\"true\"></p>\n<p>and here is the back of the badge<br><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/1-flag/badge-2.png\" alt=\"Badge Back\" data-is-external-image=\"true\"></p>\n<p>This one is very cool, good job for Nsec Team !</p>\n<h1 id=\"welcome-flag\">Welcome Flag</h1>\n<p>Well at least I found 1 flag so far which is the Welcome Flag ! This one is available on top of the entrance inside this chest.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/1-flag/flag-1.png\" alt=\"flag 1\" data-is-external-image=\"true\"></p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/write-up/nsec-2021/1-flag/welcome-flag.png\" alt=\"Welcome Flage\" data-is-external-image=\"true\"></p>\n<h1 id=\"flag\">Flag</h1>\n<p>Flag 1 :¬†<code>FLAG-W3lc0m2NSECxx</code></p>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/21/nsec-Badge.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "Write Up",
                   "BadgeLife"
            ],
            "date_published": "2023-04-05T21:47:00-04:00",
            "date_modified": "2023-08-15T21:47:43-04:00"
        },
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/my-crts-feedback/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/my-crts-feedback/index.html",
            "title": "My CRTS Feedback",
            "summary": "Hello everyone, Happy New Year ! This is actually my first post of 2023 and nothing better than to tell&hellip;",
            "content_html": "<div>Hello everyone, Happy New Year !</div>\n<div>This is actually my first post of 2023 and nothing better than to tell you about a certification I just completed.¬†</div>\n<h1>What's CRTS ?</h1>\n<div>\n<div>CRTS or Certified Red Team Specialist from<a href=\"https://www.cyberwarfare.live/\" target=\"_blank\" rel=\"noopener noreferrer\"> Cyber Warfare</a> is a Technical Certification designed to improve your Red Team skills in many Offensive Fields. Your goal is to compromise an entire lab including 4 different networks !</div>\n<br>\n<div>You must use one of three attack paths to do this. Here is a picture of the internal lab.</div>\n<div><figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/4/crts-lab.png\" alt=\"\" width=\"2560\" height=\"1440\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/4/responsive/crts-lab-xs.png 300w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/4/responsive/crts-lab-sm.png 480w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/4/responsive/crts-lab-md.png 768w\"></figure></div>\n<a href=\"https://www.cyberwarfare.live/courses/certified-red-team-specialist\" target=\"_blank\" rel=\"noopener noreferrer\">Certification Link</a></div>\n<div>¬†</div>\n<div>\n<div>The bunbdle I took (30 days access) comes with VPN access of the internal lab, three PDF write-up for each attack path, digital badge and certification. 30 days is the minimum time, you can extend your lab time if you want.</div>\n<h1>My Experience</h1>\n<p>Well, this certification turned out to be quite a surprise for me. Initially, I wasn't expecting much beyond a simple lab, and then it transformed into an incredibly engaging experience. The internal lab setup was so well-done that I found it truly enjoyable!<br><br>You have the freedom to choose any attack path you prefer. I went with the first one, which involves a Web attack. Once you compromise the web server, you're required to pivot into another internal Active Directory network. Once you compromise the domain, you're faced with yet another pivot to an internal Active Directory network linked through a Trust Forest design. Let me tell you, after completing this lab, I became a pro at pivoting and post-exploitation on Active Directory!<br><br>The cherry on top is gaining access to a complete SCADA network ‚Äì personally, that was the most satisfying reward for me!<br><br>And don't forget about the attack on Kubernetes and Docker containers; it's a fascinating aspect since you don't often get to play around with them in real pentesting engagements!</p>\n<h1>Worth It ?</h1>\n<div>I would recommend starting with a solid methodology and having a prior taste of penetration testing and Red Team skills. Relying solely on the WriteUps provided by Cyberwarfare won't cut it, as it's not always 100% detailed and might not explain every command required to reach the final objective. Consider the WriteUps as an emergency toolkit for when you're stuck!<br><br>In my case, I followed my instincts for the initial attack path. When I hit roadblocks, I turned to the writeup, especially for machines that I wasn't particularly comfortable with, like the Kubernetes (K8S) and the intensive pivoting parts.</div>\n<p>¬†</p>\n</div>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/4/my-crts.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "Updates"
            ],
            "date_published": "2023-01-19T19:09:00-05:00",
            "date_modified": "2023-08-15T19:10:06-04:00"
        },
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/tp-link-ac750-wifi-router/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/tp-link-ac750-wifi-router/index.html",
            "title": "TP-Link AC750 Wifi Router",
            "summary": "Improper handling of electronic components can lead to component destruction Here is my LinkedIn post related to this article :¬†LinkedIn-Post&hellip;",
            "content_html": "<p class=\"alert alert-danger msg msg--warning\"><strong>Improper handling of electronic components can lead to component destruction</strong></p>\n<p class=\"alert alert-info msg msg--warning\"><strong>Here is my LinkedIn post related to this article :¬†<a href=\"https://www.linkedin.com/feed/update/urn:li:activity:6978797904089989120/\">LinkedIn-Post</a></strong></p>\n<hr>\n<h1 id=\"what-you-need\">What you need</h1>\n<p>Here are all the tools you need to perform this kind of IoT Assessment on a device. For my part I didn‚Äôt have my soldering kit so I did it without but it was not very stable.</p>\n<ul>\n<li>Basic knowledge on UART ad IOT Hacking</li>\n<li>UART Bridge (Simple USB or Flipper Zero)</li>\n<li>Multimeter</li>\n<li>Cables</li>\n<li>Solder Iron (Optionnal)</li>\n<li>UART Device like Wifi Router</li>\n</ul>\n<h2 id=\"uart-\">UART ?</h2>\n<p>If you are not familiar with UART ports, I would recommend you to check my article on Flipper-Zero Section¬†<strong><a href=\"file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/flipperzero-uart-bridge-rpi4-to-flipper/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">UART USB Bridge</a></strong></p>\n<p>If this is not enough, check out this video of FlashBack-Team¬†<a href=\"https://youtu.be/01mw0oTHwxg\">Hacker‚Äôs Guide to UART Root Shells</a></p>\n<h1 id=\"tp-link-ac750\">TP-Link AC750</h1>\n<h2 id=\"informations\">Informations</h2>\n<p>The device I used was a¬†<a href=\"https://www.tp-link.com/ca/home-networking/wifi-router/archer-c20/\">TP-Link Wifi Router AC750</a></p>\n<ul>\n<li>Supports 802.11ac standard - the next generation of Wi-Fi</li>\n<li>Simultaneous 2.4GHz 300Mbps and 5GHz 433Mbps connections for 733Mbps of total available bandwidth</li>\n<li>3 external antennas provide stable omnidirectional signal and superior wireless coverage</li>\n</ul>\n<p>While doing OSINT on the device, you can easly found internal and externl picture of it.</p>\n<ul>\n<li><a href=\"https://fccid.io/TE7C20\">https://fccid.io/TE7C20</a></li>\n<li><a href=\"https://fccid.io/TE7C20/Internal-Photos/Internal-Photos-2582175\">Internal Pictures</a></li>\n</ul>\n<p>Each WIFI device has a FCC ID which is very usefull to search specs and internal pictures.</p>\n<h2 id=\"uart-port\">UART port</h2>\n<p>I was lucky on this one since the UART ports are labeled, so no need to test them with multimeter</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/uart-port.png\" alt=\"Uart port\" data-is-external-image=\"true\"></p>\n<h2 id=\"components\">Components</h2>\n<ul>\n<li>Wifi Chip - MT7628an\n<ul>\n<li><a href=\"http://vonger.cn/upload/MT7628_Full.pdf\">Datasheet</a></li>\n</ul>\n</li>\n<li>DDR SDRAM - M14D5121632A\n<ul>\n<li><a href=\"https://www.endrich.com/fm/2/M14D5121632A-2.5BG2K.pdf\">Datasheet</a></li>\n</ul>\n</li>\n<li>Wifi Chip - MT7610EN\n<ul>\n<li><a href=\"https://datasheetspdf.com/pdf/851068/Ralink/MT7610EN/1\">Datasheet</a></li>\n</ul>\n</li>\n<li>Flash - 25Q64CSIG (Back of the PCB)\n<ul>\n<li><a href=\"https://www.alldatasheet.com/view_datasheet.jsp?Searchword=25Q64CSIG&amp;sField=1\">Datasheet</a></li>\n</ul>\n</li>\n</ul>\n<h2>UART Bridge USB</h2>\n<p>Here is what my setup looks like. Like you can see I didn‚Äôt use any soldering Iron because I didn‚Äôt have one during this time.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/uart-bridge.png\" alt=\"UART Bridge\" data-is-external-image=\"true\"></p>\n<p>The UART bridge is very simple, here is a small schemas :</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/plan.png\" alt=\"Plan\" data-is-external-image=\"true\"></p>\n<p>I‚Äôll recommand you to check my post about this part : <a href=\"file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/flipperzero-uart-bridge-rpi4-to-flipper/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">UART USB Bridge</a></p>\n<p>Using¬†<code>minicom</code>¬†we can get a shell once the device is powered on !</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/2_filesystem.png\" alt=\"FileSystem\" data-is-external-image=\"true\"></p>\n<h1 id=\"shell-and-enumeration\">Shell and Enumeration</h1>\n<p>Let‚Äôs start the enumeration part on the device.<br>Just for the context I didn‚Äôt have any password for this Wifi router, SSID passwords and Admin Web password.</p>\n<p>The system is on read only so we can‚Äôt edit anything unfortunatly.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/9_readonly_fs.png\" alt=\"Read Only FS\" data-is-external-image=\"true\"></p>\n<h2 id=\"etcpasswd\">/etc/passwd</h2>\n<p>The first goodies we can get is the users and the passwords of the system.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/3_etcpasswd.png\" alt=\"etc passwd\" data-is-external-image=\"true\"></p>\n<p>The admin user has its hash on the passwd file and is easly crackable</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/8_crack_admin_linux.png\" alt=\"Crack Admin\" data-is-external-image=\"true\"></p>\n<ul>\n<li><code>admin:1234</code>¬†‚Äì&gt; root account</li>\n</ul>\n<p>We can guess that there is a dropbear for SSH Service because of the username but also during the boot of the device, it geneate new RSA keys.</p>\n<h2 id=\"device-information\">Device information</h2>\n<p>During my enumeration I could find more precise information about the device.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/13_router_info.png\" alt=\"DeviceInfo\" data-is-external-image=\"true\"></p>\n<h2 id=\"ssid-password\">SSID Password</h2>\n<p>After a while I was able to locate the SSID information and retreive the passwords.</p>\n<p>Here is the PATH where to find the password stored in clear text :¬†<img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/16_location_passwords_ap.png\" alt=\"PathPassword\" data-is-external-image=\"true\"></p>\n<p>Here is the default SSID password which is¬†<code>12345678</code>, classic.<br><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/14_default_AP_password.png\" alt=\"DefaultPassword\" data-is-external-image=\"true\"></p>\n<p>And finally the Password of the SSID that is currently in use on the device.<br><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/15_inuse_AP_password.png\" alt=\"SSIDPassword\" data-is-external-image=\"true\"></p>\n<h2>Admin Panel</h2>\n<p>Since I now have access to the Wifi network I can now get access to the Admin Panel but unfortunatly I need to find a way to grab the admin password !</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/tplink-ac750/6_login_http.png\" alt=\"SSIDPassword\" data-is-external-image=\"true\"></p>\n<p>Next time i‚Äôll dig into the admin panel and find maybe a way to get inside (Hardcoded password ?)</p>\n<p>See ya !</p>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/11/iot.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "IoT Hacking"
            ],
            "date_published": "2022-10-23T20:43:00-04:00",
            "date_modified": "2023-08-15T20:43:21-04:00"
        },
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/firmware-reverse-or-d-link-dcs-932l/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/firmware-reverse-or-d-link-dcs-932l/index.html",
            "title": "Firmware Reverse | D-Link - DCS-932L",
            "summary": "This is actually my first firmware ‚ÄúReverse‚Äù. This post will also serve as a tutorial for myself and others !&hellip;",
            "content_html": "<p class=\"alert alert-warning msg msg--warning\"><strong>This is actually my first firmware ‚ÄúReverse‚Äù. This post will also serve as a tutorial for myself and others !</strong></p>\n<p class=\"alert alert-danger msg msg--warning\"><strong>For education purpose</strong></p>\n<hr>\n<h1 id=\"sources\">Sources</h1>\n<ul>\n<li>Version :¬†<code>1.14.04</code></li>\n<li>MD5 :¬†<code>b93d60f595c4736a153ca8c61d77ffc6</code></li>\n<li>Download link¬†<a href=\"http://files.dlink.com.au/products/DCS-932L/REV_A/Firmware/\">http://files.dlink.com.au/products/DCS-932L/REV_A/Firmware/</a></li>\n</ul>\n<p>This test we perfomed on Kali Linux VM.</p>\n<h1 id=\"stage-1---analysis\">Stage 1 - Analysis</h1>\n<p>Using¬†<code>binwalk</code>¬†we can ‚Äúwalk‚Äù through the firmware and check signatures inside the binary, those signatures return known Desciption and Hex address. of what‚Äôs inside the binary.</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">binwalk dcs932l_v1.14.04.bin\n</code></pre>\n</div>\n<p>Here is the output</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n106352        0x19F70         U-Boot version string, \"U-Boot 1.1.3\"\n106816        0x1A140         CRC32 polynomial table, little endian\n124544        0x1E680         HTML document header\n124890        0x1E7DA         HTML document footer\n124900        0x1E7E4         HTML document header\n125092        0x1E8A4         HTML document footer\n125260        0x1E94C         HTML document header\n125953        0x1EC01         HTML document footer\n327680        0x50000         uImage header, header size: 64 bytes, header CRC: 0x88345E96, created: 2016-09-09 13:52:27, image size: 3804958 bytes, Data Address: 0x80000000, Entry Point: 0x803B8000, data CRC: 0x531E94DE, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"Linux Kernel Image\"\n327744        0x50040         LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 6558763 bytes\n</code></pre>\n</div>\n<h2 id=\"binwalk-result\">Binwalk Result</h2>\n<ul>\n<li><code>106352 - 0x19F70</code>¬†: U-Boot 1.1.3</li>\n<li><code>327680 - 0x50000</code>¬†: Linux Kernel Image</li>\n<li><code>327744 - 0x50040</code>¬†: LZMA Compress Data</li>\n</ul>\n<p>uImage Header at¬†<code>327680</code>¬†tell us that we can found a LInux Kerne Image in a LZMA arhcive format.</p>\n<h2 id=\"decompress-lzma\">Decompress LZMA</h2>\n<p>Unpack the LZMA Archive using¬†<code>dd</code>¬†tool. We output the result inside the¬†<code>kernal.lzma</code>¬†file.</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">dd if=dcs932l_v1.14.04.bin skip=327744 bs=1 of=kernel.lzma\n</code></pre>\n</div>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/kernellzmq.jpeg\" alt=\"kernel.lzma\" data-is-external-image=\"true\"></p>\n<p>Make sure the LZMA file is well extracted</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/kernel-check.jpeg\" alt=\"kernel.lzma.check\" data-is-external-image=\"true\"></p>\n<p>Now let‚Äôs extract the LZMA achive using¬†<code>unlzma</code>¬†tool</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">unlzma -d &lt; kernel.lzma &gt; kernel\n</code></pre>\n</div>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/lzma-check.jpeg\" alt=\"kernel.lzma.check\" data-is-external-image=\"true\"></p>\n<div class=\"alert alert-warning\"><strong>Got an error while extracting the kernel bit it seems working just fine for now , lucky me.</strong></div>\n<h1 id=\"stage-2---kernel\">Stage 2 - Kernel</h1>\n<p>Now we have the kernel in our hands, let‚Äôs see what‚Äôs in there.</p>\n<p>Again we use¬†<code>binwalk</code></p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n3145804       0x30004C        Linux kernel version 2.6.21\n3175792       0x307570        SHA256 hash constants, little endian\n3183312       0x3092D0        AES Inverse S-Box\n3184080       0x3095D0        AES S-Box\n3389960       0x33BA08        Unix path: /usr/gnemul/irix/\n3392244       0x33C2F4        Unix path: /usr/lib/libc.so.1\n3393940       0x33C994        Unix path: /dev/vc/0\n3408260       0x340184        Copyright string: \"Copyright (c) 2010 Alpha Networks Inc.\"\n3491536       0x3546D0        Unix path: /etc/Wireless/RT2860STA/RT2860STA.dat\n3573187       0x3685C3        Neighborly text, \"neighbor %.2x%.2x.%.2x:%.2x:%.2x:%.2x:%.2x:%.2x lost on port %d(%s)(%s)\"\n3807776       0x3A1A20        CRC32 polynomial table, little endian\n3811440       0x3A2870        AES S-Box\n4038656       0x3DA000        LZMA compressed data, properties: 0x5D, dictionary size: 1048576 bytes, uncompressed size: 8072704 bytes\n</code></pre>\n</div>\n<p>Another LZMA archive is visible at 4038656</p>\n<h2 id=\"extract-unkown-lzma-archive\">Extract Unkown LZMA archive</h2>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/unkown.jpeg\" alt=\"kernel.lzma.check\" data-is-external-image=\"true\"></p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">unlzma -d &lt; unknown.lzma &gt; unkown\n</code></pre>\n</div>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/unknown1.jpeg\" alt=\"kernel.lzma.check\" data-is-external-image=\"true\"></p>\n<p>And here we go, Here is the¬†<code>CPIO</code>¬†archive thta contain the file system of the firnware.</p>\n<h2 id=\"cves\">CVEs</h2>\n<p>In the same time, the first¬†<code>binwalk</code>¬†on the kernel file give us the CVE output of the current kernel version¬†<strong><code>Linux Kernel 2.6.21 - 15 CVE</code></strong></p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">1\tCVE-2012-1583\t399\t\tDoS\t2012-06-16\t2016-08-23\t5.0\tNone\tRemote\tLow\tNot\n2\tCVE-2009-2406\t119\t\tDoS\n3\tCVE-2009-1389\t119\t\tDoS\n4\tCVE-2009-0778\t\t\tDoS\t2009-03-12\t2020-08-28\t7.1\tNone\tRemote\tMedium\tNot\n5\tCVE-2008-4609\t16\t\tDoS\t2008-10-20\t2021-07-07\t7.1\tNone\tRemote\tMedium\tNot\n6\tCVE-2008-2750\t20\t\tDoS\n7\tCVE-2008-1669\t94\t\tExec\n8\tCVE-2008-1294\t20\t\tBypass\t2008-05-02\t2018-10-30\t2.1\tNone\tLocal\tLow\tNot\n9\tCVE-2008-0600\t94\t\t+Priv\t2008-02-12\t2018-10-30\t7.2\tNone\tLocal\tLow\tNot\n10\tCVE-2008-0352\t119\t\tDoS\n11\tCVE-2007-2876\t\t\tDoS\t2007-06-11\t2018-10-30\t6.1\tNone\tLocal\n12\tCVE-2007-2453\t\t\t\t2007-06-11\t2018-10-30\t1.2\tNone\tLocal\tHigh\tNot\n13\tCVE-2007-2451\t\t\t+Info\t2007-05-29\t2018-10-30\t5.0\tNone\tRemote\tLow\tNot\n14\tCVE-2007-2172\t20\t\t\t2007-04-22\t2018-10-19\t4.7\tNone\tLocal\tMedium\tNot\n15\tCVE-2006-6058\t189\t\tDoS\n</code></pre>\n</div>\n<h1 id=\"stage-3---unpack-cpio\">Stage 3 - Unpack CPIO</h1>\n<p>Now let‚Äôs unpack this arhive CPIO and see if we an get the file system.</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">sudo cpio -idm --no-absolute-filenames &lt; ../unkown\n</code></pre>\n</div>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/cpiounpack.jpeg\" alt=\"kernel.lzma.check\" data-is-external-image=\"true\"></p>\n<p>The filesystem is here we can now explore it on our own</p>\n<h1 id=\"stage-4---filesystem\">Stage 4 - Filesystem</h1>\n<h2 id=\"etc_ro\">/etc_ro/</h2>\n<p>Inside the¬†<code>/etc_ro/</code>¬†folder we can see custom script and a web folder application.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/etc_ro.jpeg\" alt=\"kernel.lzma.check\" data-is-external-image=\"true\"></p>\n<p>Simple Web application and private keys auto signed for the web server</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/etc_ro2.jpeg\" alt=\"kernel.lzma.check\" data-is-external-image=\"true\"></p>\n<p>Another firmware in the WLAN folder¬†<img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/etc_ro3.jpeg\" alt=\"kernel.lzma.check\" data-is-external-image=\"true\"></p>\n<p>And then the private RSA key fo the web server</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/etc_ro4.png\" alt=\"kernel.lzma.check\" data-is-external-image=\"true\"></p>\n<h2 id=\"sbin\">/sbin/</h2>\n<p>The sbin folder seems to be more interesting since we can check the custom scripts.¬†<img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/sbin1.jpeg\" alt=\"sbin\" data-is-external-image=\"true\"></p>\n<p>First thing I see while checking the custom scripts is that the absolute path of the binaries is not mentionned, this can be used as an exploit to bypass the real binary and use a malicious one if the¬†<code>$PATH</code>¬†variable is changed.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/sbin2.jpeg\" alt=\"sbin\" data-is-external-image=\"true\"></p>\n<h2 id=\"internetsh\">internet.sh</h2>\n<p>This script is interesting, since we can see the process of creating a new user on the system which is added directly to the¬†<code>/ect/passwd</code>.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/sbin3.jpeg\" alt=\"sbin\" data-is-external-image=\"true\"></p>\n<p>Here is some source code for the¬†<a href=\"https://github.com/Nossiac/mtk-openwrt-feeds/blob/master/applications/wificonf/files/usr/bin/nvram_get\">nvram_get(click-me)</a>¬†function, from¬†<code>wificonf</code>¬†package.</p>\n<p>This function seems to retreive a value from a device</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">nvram_get [dev] &lt;key&gt;\n</code></pre>\n</div>\n<p>The value 2880 seems to be a default value for the first card</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-keyword\">else</span>, try default mapping with l1profile:</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     2880  -&gt; 1st card</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     rtdev -&gt; 2nd card</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\">     wifi3 -&gt; 3rd card</span>\n</code></pre>\n</div>\n<h2 id=\"storagesh\">storage.sh</h2>\n<p>From this script we can see a nasty¬†<code>chmod 777</code>¬†on the home directory of the current user or the ser created.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/reverse-engineering/iot-hacking/d-link-dcs-932l/storage.jpeg\" alt=\"storage\" data-is-external-image=\"true\"></p>\n<p>Here is the github that contains all the scripts files :¬†<a href=\"https://github.com/socoola/yhrouter/blob/master/user/rt2880_app/scripts/storage.sh\">github-scripts</a></p>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/12/firmware.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "IoT Hacking"
            ],
            "date_published": "2022-09-22T20:46:00-04:00",
            "date_modified": "2023-08-15T20:46:19-04:00"
        },
        {
            "id": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/flipperzero-uart-bridge-rpi4-to-flipper/index.html",
            "url": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/flipperzero-uart-bridge-rpi4-to-flipper/index.html",
            "title": "FlipperZero - UART Bridge RPi4 to Flipper",
            "summary": "This is a simple tutorial for UART bridge function on the Flipper Zero. I‚Äôm using RaspberryPi4, FlipperZero and a Macbook&hellip;",
            "content_html": "<p>This is a simple tutorial for UART bridge function on the Flipper Zero. I‚Äôm using RaspberryPi4, FlipperZero and a Macbook laptop for this tutorial.</p>\n<hr>\n<h1></h1>\n<h1>Schema</h1>\n<p>The bridge is pretty simple, we connect UART pin from Raspberry Pi4 to Flipper Zero and get a shell using flipper¬†<code>tty</code>¬†from the laptop.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/6/plan.png\" alt=\"\" width=\"1304\" height=\"766\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/6/responsive/plan-xs.png 300w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/6/responsive/plan-sm.png 480w ,file:///Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/6/responsive/plan-md.png 768w\"></figure>\n<h1>UART Concept</h1>\n<p>UART is a serial protocol, which means it transfers data between components one bit at a time.</p>\n<p>To synchornize communications, the UART transmitter and receiver must agree on a specific baud rate ( the rate of bits transmitted per second)</p>\n<p>Important concept :</p>\n<ul>\n<li><code>RX</code>¬†: Receive, will get the data</li>\n<li><code>TX</code>¬†: Transmit, will transfer the data</li>\n<li><code>GND</code>¬†: Ground</li>\n<li><code>VCC</code>¬†: Voltage, not used here since powered by USB cable</li>\n</ul>\n<p class=\"msg--highlight  msg--info msg \"><strong>The¬†<code>RX(10)</code>¬†pin from Rapsberry Pi must be connected to the¬†<code>TX(13)</code>¬†from FlipperZero.<br>The¬†<code>TX(8)</code>¬†pin from Raspberry Pi must be connected to the¬†<code>RX(14)</code>¬†from FlipperZero.</strong></p>\n<p>It can be confused at the first place put it make sense since the Transmiter must send the bits to the receiver.</p>\n<h2>Identify GND</h2>\n<ul>\n<li>Power Off the device you want to test</li>\n<li>Turn your multimeter dial to continuity Test mode (sound wave icon)</li>\n<li>Place Black lead to any metalic part of the circuit/PCB (Direct conductive path to earth)</li>\n<li>Place Red lead on each of the UART port and wait for buzzer sound, if sound then its the GND pin from UART</li>\n</ul>\n<h2>Identify VCC</h2>\n<ul>\n<li>Power the device you are testing</li>\n<li>Turn Multimeter dial to DC voltage mode and set it to 20V</li>\n<li>Place Black lead to any metalic part of the PCB</li>\n<li>Place Red on suspected UART pin until the voltage indicates¬†<code>3.3V</code>¬†or¬†<code>5V</code>, this is the Vcc pin.</li>\n</ul>\n<h2>Identify TX</h2>\n<ul>\n<li>Turn off the device</li>\n<li>Keep Multimeter on DC voltage of 20V</li>\n<li>Place Black lead on any metalic part of the PCB, like the GND testing part</li>\n<li>Place Red lead on supected Pin</li>\n<li>Power up the device and check the voltage value : If the voltage fluctuates for a few seconds and then stabilizes at the Vcc value (<code>3.3V</code>¬†or¬†<code>5V</code>) then it means this is¬†<code>TX</code>¬†pin.</li>\n</ul>\n<p class=\"alert alert-info msg msg--info\"><strong>üí° The variations appears because the device is Booting and send data to¬†<code>TX</code>¬†for debuging.</strong></p>\n<h2>Identify RX</h2>\n<p>Well, this is most likely the last one.</p>\n<ul>\n<li>Like TX test</li>\n<li>You can identify it because it has the lowest voltage variation and lowest overall value of all the UART pins</li>\n</ul>\n<h1>Setup</h1>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://alrikrr.github.io/posts/flipper-zero/flipper-gpio/uart-bridge-pi4/setup.png\" alt=\"Minicom Serial port\" width=\"702\" height=\"431\" data-is-external-image=\"true\"></figure>\n<p>Here is my setup in a single picture. Like in the schema, Raspberry RX,TX to Flipper TX,RX and Flipper connected with USB port on my laptop.</p>\n<p>The Raspberry is also powered on the laptop just for the power.</p>\n<h2>Minicom</h2>\n<p>First you need to install minicom</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> MacOs</span>\nbrew install minicom\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> Linux</span>\napt install minicom\n</code></pre>\n</div>\n<p>Once installed, change the default serial port `/dev/modem/ to your flipper.</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">minicom -s\n</code></pre>\n</div>\n<p>Go to¬†<code>Serial Port Setup</code>¬†and then enter¬†<code>A</code>.</p>\n<p>Here I‚Äôm using the¬†<code>/dev/tty.usbmodemflip_Il4l0w1</code>¬†port of my Flipper.</p>\n<p><img loading=\"lazy\" src=\"https://alrikrr.github.io/posts/flipper-zero/flipper-gpio/uart-bridge-pi4/minicom-serial.png\" alt=\"Minicom Serial port\" data-is-external-image=\"true\"></p>\n<p>Now you can start minicom</p>\n<div class=\"highlight\">\n<pre tabindex=\"0\"><code class=\"language-shell hljs\" data-lang=\"shell\">minicom\n</code></pre>\n</div>\n<p>Once minicom is started, you just need to plug the UART pin to your Flipper then use the UART Bridge fonction on GPIO menu.</p>\n<figure class=\"center\"><img loading=\"lazy\"  src=\"https://alrikrr.github.io/posts/flipper-zero/flipper-gpio/uart-bridge-pi4/uart-app.png\" alt=\"UART APp\" data-is-external-image=\"true\"></figure>\n<p>You can leave the default configuration, if the Baud is not set, just change it to¬†<code>115200</code>.<br>TO find the right Baud, you need to check the documentation or use the most common baud rates like¬†<code>9600</code>,¬†<code>38400</code>,¬†<code>19200</code>,¬†<code>57600</code>¬†and¬†<code>115200</code>.</p>\n<h2 id=\"shell-\">Shell !</h2>\n<p>Once the UART Brige Application selected, you should see the login prompt from the raspberry pi.</p>\n<figure class=\"center\"><img loading=\"lazy\"  src=\"https://alrikrr.github.io/posts/flipper-zero/flipper-gpio/uart-bridge-pi4/prompt.png\" alt=\"Prompt\" data-is-external-image=\"true\"></figure>\n<p>You can now login to the Raspberry Pi and enjoy your shell !</p>\n<figure class=\"center\"><img loading=\"lazy\"  src=\"https://alrikrr.github.io/posts/flipper-zero/flipper-gpio/uart-bridge-pi4/logged.png\" alt=\"UART Shell\" data-is-external-image=\"true\"></figure>",
            "image": "file:////Users/adrien/Documents/Publii/sites/alrikrrs-blog/preview/media/posts/6/banner.jpg",
            "author": {
                "name": "AlrikRr"
            },
            "tags": [
                   "FlipperZero"
            ],
            "date_published": "2022-09-21T20:11:00-04:00",
            "date_modified": "2023-08-15T20:11:48-04:00"
        }
    ]
}
